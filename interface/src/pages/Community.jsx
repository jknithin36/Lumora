// src/pages/Community.jsx (or src/components/Community.jsx)
import React, { useEffect, useState, useCallback } from "react";
import { dummyPublishedImages } from "@/assets/assets";

/** --- tiny skeleton card --- */
function SkeletonCard() {
  return (
    <div className="rounded-2xl overflow-hidden bg-muted/50 border border-border/30 shadow-sm animate-pulse">
      <div className="h-48 sm:h-56 w-full bg-muted" />
      <div className="p-3 space-y-2">
        <div className="h-3 w-2/3 bg-muted rounded" />
        <div className="h-3 w-1/3 bg-muted rounded" />
      </div>
    </div>
  );
}

/** --- image card --- */
function ImageCard({ item, onOpen }) {
  const { imageUrl, userName, prompt } = item || {};
  const initials = (userName || "U")
    .split(" ")
    .map((s) => s[0])
    .join("")
    .slice(0, 2)
    .toUpperCase();

  const handleError = (e) => {
    e.currentTarget.src =
      "data:image/svg+xml;utf8," +
      encodeURIComponent(
        `<svg xmlns='http://www.w3.org/2000/svg' width='800' height='480'>
           <defs>
             <linearGradient id='g' x1='0' y1='0' x2='1' y2='1'>
               <stop offset='0%' stop-color='#c7c9d1'/>
               <stop offset='100%' stop-color='#9aa0aa'/>
             </linearGradient>
           </defs>
           <rect width='100%' height='100%' fill='url(#g)'/>
           <text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle'
                 font-family='system-ui, -apple-system, Segoe UI, Roboto, sans-serif'
                 font-size='24' fill='#fff' opacity='0.85'>
             Image unavailable
           </text>
         </svg>`
      );
  };

  return (
    <figure
      className="group relative rounded-2xl overflow-hidden bg-muted/50 border border-border/30 shadow-sm hover:shadow-md transition"
      title={prompt || "Generated image"}
    >
      <img
        src={imageUrl}
        alt={prompt ? `‚Äú${prompt}‚Äù by ${userName}` : `Generated by ${userName}`}
        loading="lazy"
        onError={handleError}
        className="w-full h-48 sm:h-56 object-cover"
      />

      {/* bottom info bar */}
      <figcaption className="absolute inset-x-0 bottom-0 p-3 bg-gradient-to-t from-black/60 to-transparent text-white">
        <div className="flex items-center gap-2">
          <span className="inline-flex h-7 w-7 shrink-0 items-center justify-center rounded-full bg-white/15 ring-1 ring-white/20 text-[11px] font-semibold">
            {initials}
          </span>
          <div className="min-w-0">
            <p className="text-sm font-medium truncate">
              {userName || "Unknown"}
            </p>
            {prompt && (
              <p className="text-xs opacity-90 truncate" title={prompt}>
                {prompt}
              </p>
            )}
          </div>
        </div>
      </figcaption>

      {/* subtle hover overlay + view button */}
      <div className="absolute inset-0 hidden group-hover:flex items-center justify-center">
        <button
          onClick={() => onOpen(item)}
          className="px-3 py-1.5 rounded-full text-sm bg-bg/90 text-fg border border-border/40 shadow hover:bg-bg transition"
        >
          View
        </button>
      </div>
    </figure>
  );
}

/** --- simple lightbox (Esc / overlay click closes) --- */
function Lightbox({ item, onClose }) {
  const onKey = useCallback(
    (e) => {
      if (e.key === "Escape") onClose();
    },
    [onClose]
  );

  useEffect(() => {
    if (!item) return;
    document.addEventListener("keydown", onKey);
    return () => document.removeEventListener("keydown", onKey);
  }, [item, onKey]);

  if (!item) return null;

  return (
    <div
      className="fixed inset-0 z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4"
      role="dialog"
      aria-modal="true"
      onClick={onClose}
    >
      <div
        className="relative w-full max-w-5xl"
        onClick={(e) => e.stopPropagation()}
      >
        <button
          onClick={onClose}
          className="absolute -top-3 -right-3 md:-top-4 md:-right-4 h-9 w-9 rounded-full bg-bg text-fg border border-border/40 shadow hover:bg-bg/90"
          aria-label="Close"
          title="Close"
        >
          ‚úï
        </button>

        <div className="rounded-2xl overflow-hidden bg-bg border border-border/40 shadow-xl">
          <img
            src={item.imageUrl}
            alt={item.prompt ? `‚Äú${item.prompt}‚Äù by ${item.userName}` : ""}
            className="w-full max-h-[78vh] object-contain bg-black/40"
          />
          <div className="p-4 border-t border-border/30">
            <p className="text-sm text-muted-foreground">
              Created by{" "}
              <span className="text-fg font-medium">{item.userName}</span>
            </p>
            {item.prompt && <p className="text-sm mt-1">{item.prompt}</p>}
          </div>
        </div>
      </div>
    </div>
  );
}

const Community = () => {
  const [images, setImages] = useState([]);
  const [loading, setLoading] = useState(true);
  const [lightboxItem, setLightboxItem] = useState(null);

  useEffect(() => {
    // Replace with your fetch; using dummy for now
    setImages(Array.isArray(dummyPublishedImages) ? dummyPublishedImages : []);
    setLoading(false);
  }, []);

  return (
    <div className="relative">
      {/* faint grid like your screenshot */}
      <div
        aria-hidden
        className="pointer-events-none absolute inset-0 -z-10 opacity-[0.06]"
        style={{
          backgroundImage:
            "linear-gradient(to right, currentColor 1px, transparent 1px), linear-gradient(to bottom, currentColor 1px, transparent 1px)",
          backgroundSize: "28px 28px",
          color: "oklch(0.21 0.02 255)",
          maskImage:
            "radial-gradient(ellipse at 50% 10%, black 40%, transparent 75%)",
        }}
      />

      {/* centered header (minimal) */}
      <div className="mx-auto max-w-5xl px-4 pt-10 pb-6 text-center">
        <div className="inline-flex items-center gap-2 px-3 py-1.5 rounded-full border border-white/20 bg-muted/50 backdrop-blur text-xs text-muted-foreground mb-4">
          community
        </div>

        <h1 className="text-3xl sm:text-[2.25rem] font-semibold tracking-tight leading-tight">
          <span className="bg-gradient-to-r from-white via-[oklch(0.75_0.05_250)] to-[oklch(0.35_0.12_250)] bg-clip-text text-transparent">
            Community
          </span>{" "}
          Images
        </h1>

        <p className="mt-3 text-sm sm:text-base text-muted-foreground">
          A simple gallery of images shared by the community.
        </p>
      </div>

      {/* grid */}
      <div className="mx-auto max-w-5xl px-4 pb-12">
        {loading ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {Array.from({ length: 6 }).map((_, i) => (
              <SkeletonCard key={i} />
            ))}
          </div>
        ) : images.length ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {images.map((item, i) => (
              <ImageCard
                key={item.id ?? item.imageUrl ?? i}
                item={item}
                onOpen={setLightboxItem}
              />
            ))}
          </div>
        ) : (
          <div className="rounded-2xl border border-border/30 bg-muted/40 p-10 text-center">
            <div className="text-4xl mb-2">üñºÔ∏è</div>
            <h3 className="text-lg font-medium">No images yet</h3>
            <p className="text-sm text-muted-foreground">Check back soon.</p>
          </div>
        )}
      </div>

      {/* lightbox */}
      <Lightbox item={lightboxItem} onClose={() => setLightboxItem(null)} />
    </div>
  );
};

export default Community;
